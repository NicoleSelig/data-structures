public class QueueDonut implements Queue
{
	int front, back, count;
	Object [] donut;
	
	public QueueDonut(int maxsize)
	{
		donut=new Object[maxsize];
		count=0;
		back=0;
		front=1;  // assumes maxsize>=2
	}
	
	public void enqueue(Object x)
	{
		if(isFull()) return;
		back++;
		if(back>=donut.length) back=0;
		donut[back]=x;
		count++;
	}
	public Object dequeue()
	{
		if(isEmpty()) return null;
		else 
		{
			int oldfront=front;
			front++;
			if(front>=donut.length) front=0;
			// front = (front+1) % donut.length;
			count--;
			return donut[oldfront];
		}
	}
	public Object getFront()
	{
		if(isEmpty()) return null;
		else return donut[front];
	}
	public boolean isEmpty() { return count<=0; }
	public boolean isFull() { return count>=donut.length; }
	public int size() { return count; }
	public void makeEmpty()
		{  count=0; front=1; back=0; }
}