public class Recursion
{
	static int factorial(int n)
	{
		if(n==0)
			return 1;
		else
			return n*factorial(n-1);
	}
	
	static double pow(double x, int n)
	{
		if(n==0)
			return 1;
		else if(n>0)
			return x*pow(x,n-1);
		else // n<0
			return 1/pow(x,-n);
	}
	
	static double powv2(double x, int n)
	{
		if(n==0)
			return 1;
		else if(n>0)
		{
			if(n%2==0) // n is even
			{
				double y=powv2(x,n/2);
				return y*y;
			}
			else // n is odd
			{
				double y=powv2(x,(n-1)/2);
				return y*y*x;
			}
		}
		else // n<0
			return 1/powv2(x,-n);
	}
	
	static void printbackwards(int n)
	{
		if(n<10)
			System.out.println(n);
		else
		{
			int last=n%10;
			int rest=n/10;
			System.out.print(last);
			printbackwards(rest);
		}
	}
	
	static long fib(int n)
	{
		if(n==0)
			return 0;
		else if(n==1)
			return 1;
		else
			return fib(n-1)+fib(n-2);
	}
	
	static long fib_dynamic(int n)
	{
		if(n<2) return n;
		long [] f=new long[n+1];
		f[0]=0; f[1]=1;
		for(int i=2; i<=n; i++)
			f[i]=f[i-1]+f[i-2];
		return f[n];		
	}
	
	public static void main(String [] args)
	{
		System.out.println(factorial(4));
		//System.out.println(factorial(-1));
		System.out.println(pow(3.1415926,20));
		System.out.println(powv2(3.1415926,20));
		printbackwards(2019);  System.out.println("");
		printbackwards(8675309);  System.out.println("");
		for(int i=0; i<50; i++)
			System.out.println("Fib("+i+")="+fib_dynamic(i));
		for(int i=0; i<50; i++)
			System.out.println("Fib("+i+")="+fib(i));
	}
}